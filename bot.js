// ______    ______      _     _     _ _     ______       _        
// |  _  \   | ___ \    | |   | |   (_| |    | ___ \     | |       
// | | | |___| |_/ /__ _| |__ | |__  _| |_   | |_/ / ___ | |_      
// | | | / _ |    // _` | '_ \| '_ \| | __|  | ___ \/ _ \| __|     
// | |/ |  __| |\ | (_| | |_) | |_) | | |_   | |_/ | (_) | |_      
// |___/ \___\_| \_\__,_|_.__/|_.__/|_|\__|  \____/ \___/ \__|     
//  _              _   __     _     _              _               
// | |            | | / /    (_)   | |            | |              
// | |__  _   _   | |/ / _ __ _ ___| |_ ___  _ __ | |__   ___ _ __ 
// | '_ \| | | |  |    \| '__| / __| __/ _ \| '_ \| '_ \ / _ | '__|
// | |_) | |_| |  | |\  | |  | \__ | || (_) | |_) | | | |  __| |   
// |_.__/ \__, |  \_| \_|_|  |_|___/\__\___/| .__/|_| |_|\___|_|   
//         __/ |                            | |                    
//        |___/                             |_|                    
//          __         ____       _____                            
//         /  |       / ___|     |  _  |                           
// __   __ `| |      / /___      | |_| |                           
// \ \ / /  | |      | ___ \     \____ |                           
//  \ V /  _| |_  _  | \_/ |  _  .___/ /                           
//   \_/   \___/ (_) \_____/ (_) \____/                            
//
//
const Discord = require('discord.js');
const bot = new Discord.Client();
bot.commands = new Discord.Collection();
const mongoose = require('mongoose');
const fs = require('fs');
const helloWords = ["welcome", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "welc", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "—Ö–∞–∞–∞–π", "—Ö–∞–∞–π", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "–ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ"];
const repWords = ["welcome", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "welc", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "—Ö–∞–∞–∞–π", "—Ö–∞–∞–π", "–ø—Ä–∏–≤–µ—Ç–∏–∫", "–ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ", "–∫—Ä–∞—Å–∏–≤–æ", "—Ç—ã –º–æ–ª–æ–¥–µ—Ü", "–∫—Ä–∞—Å–∏–≤–∞—è", "–∫—Ä–∞—Å–∏–≤—ã–π", "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è", "—Ö–æ—Ä–æ—à–∏–π", "—Ö–æ—Ä–æ—à–∞—è", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ", "–∫—Ä—É—Ç–æ–π", "–∫—Ä—É—Ç–∞—è", "–∫—Ä—É—Ç—ã—à–∫–∞", "+—Ä–µ–ø", "+ —Ä–µ–ø", "+ —Ä–µ–ø—É—Ç–∞—Ü–∏—è", "+—Ä–µ–ø—É—Ç–∞—Ü–∏—è", "–ø–ª—é—Å —Ä–µ–ø", "–ø–ª—é—Å —Ä–µ–ø—É—Ç–∞—Ü–∏—è", ":)", "‚ô•", ")", "))", ")))"];
const minusRepWorld = ["—Ö—É–π", "–ø–∏–∑–¥–∞", "–∑–∞–ª—É–ø–∞", "—É–µ–±–∞–Ω", "—É—ë–±–æ–∫", "—É–µ–±–æ–∫", "—Ö—É–µ—Å–æ—Å", "–±–ª—è–¥–∏–Ω–∞", "–ø–∏–∑–¥–æ–ª–∏–∑", "–ø–æ—à—ë–ª –Ω–∞—Ö—É–π", "–ø–æ—à—ë–ª –Ω–∞ —Ö—É–π", "–Ω–∞—Ö—É–π –ø–æ—à—ë–ª", "—á—É—Ä–∫–∞", "–º–∞—Ç—å –µ–±–∞–ª", "–º–∞—Ç—å —Ç–≤–æ—é –µ–±–∞–ª", "–µ–±–∞–ª –º–∞—Ç—å", "—á—ë —Å —Ö—É—è", "—á–µ —Å —Ö—É—è", "–ø—Å–∏–Ω–∞ –µ–±–∞–Ω–∞—è", "–ø—Å–∏–Ω–∞ —ë–±–∞–Ω–∞—è"];
const config = require("./botconfig.json");
const token = config.token;
const prefix = config.prefix;
//mongoose
//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
const profileModel = require('./schemas/profileSchema.js');
const pvcModel = require('./schemas/pvcSchema.js');
const dailyModel = require('./schemas/dailySchema.js');
const vctimeModel = require('./schemas/vctimeSchema.js');
const rbModel = require('./schemas/rbSchema.js');
const loveroomModel = require('./schemas/loveroomSchema.js');
const clanModel = require('./schemas/clanSchema.js');
const botUptime = require('./schemas/uptime.js');
const actionModel = require('./schemas/actionSchema.js');
//–¶–µ–Ω—ã
const prCost = 60;
//–ö–ª–∞–Ω—ã
const xplvlmult = 4320;
//–†–æ–ª–∏ –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏
//–¢–∏–ø—ã:
//      0 - –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–±–∏—Ä–∞—Ç—å
//      1 - —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å
//      2 - —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è—Ç—å
const reactrole = [{
		emoji: "‚ôÄ",
		roleID: "831930483394347068",
		channelID: "831676061317726218",
		messageID: "840795883406491718",
		type: 0,
		single: 1,
	},
	{
		emoji: "üî∏",
		roleID: "831930508098535455",
		channelID: "831676061317726218",
		messageID: "840795883406491718",
		type: 0,
		single: 1,
	},
	{
		emoji: "‚ôÇ",
		roleID: "831930496799473754",
		channelID: "831676061317726218",
		messageID: "840795883406491718",
		type: 0,
		single: 1,
	},
	{
		emoji: "üåü",
		roleID: "839615740934881320",
		channelID: "831676061317726218",
		messageID: "840795896119427073",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:csgo:841064013492387891>",
		roleID: "831930328926126110",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:rust:841064014108033064>",
		roleID: "831930349340459058",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:dota2:841064013534068767>",
		roleID: "831930361969639454",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:GTAV:841064013940260935>",
		roleID: "831930379278876693",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:overwatch:841064014057439233>",
		roleID: "831930391572775002",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:pubg:841064015874621520>",
		roleID: "831930403802841158",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:minecraft:841064013638139944>",
		roleID: "831930418063605830",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:valorant:841064013697777756>",
		roleID: "831930432391086080",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:leagueoflegends:841064013990330429>",
		roleID: "831930445981548564",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:fortnite:841064013646528512>",
		roleID: "831930458798948381",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	},
	{
		emoji: "<:apex_legends:841064015475113994>",
		roleID: "831930471197442058",
		channelID: "831676061317726218",
		messageID: "844982411003035708",
		type: 0,
		single: 0,
	}
];

//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞–Ω–≥–æ
mongoose.connect(config.mongodb_srv, {
	useNewUrlParser: true,
	useUnifiedTopology: true,
	useFindAndModify: false
}).then(() => {
	console.info('---MONGO---');
	console.info('Connected to the database!');
	console.info('---MONGO---');
}).catch((err) => {
	console.warn('---MONGO-ERROR---');
	console.warn(err);
	console.warn('---MONGO-ERROR---');
})

//—á—Ç–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞
fs.readdir('./cmds/', (err, files) => {
	if (err) console.log(err);
	let jsfiles = files.filter(f => f.split(".").pop() === "js")
	if (jsfiles.length <= 0) console.log("–Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!");
	console.log(`–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${jsfiles.length} –∫–æ–º–∞–Ω–¥`);
	jsfiles.forEach((f, i) => {
		let props = require(`./cmds/${f}`);
		console.log(`${i+1}. ${f} –∑–∞–≥—Ä—É–∂–µ–Ω!`);
		bot.commands.set(props.help.name, props);
		bot.commands.set(props.help.alias, props);
	})
})

//–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.on('ready', async () => {
	try {
		//const channels = bot.channels.cache.filter(c => c.type === 'voice');

		bot.generateInvite(["ADMINISTRATOR"]).then(link => {
			console.log(link);
		})
		console.log(`–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç ${bot.user.username}\n\n`);
		console.info(' ______   _______  ______    _______  _______  _______  ___   _______       ');
		console.info('|      | |       ||    _ |  |   _   ||  _    ||  _    ||   | |       |      ');
		console.info('|  _    ||    ___||   | ||  |  |_|  || |_|   || |_|   ||   | |_     _|      ');
		console.info('| | |   ||   |___ |   |_||_ |       ||       ||       ||   |   |   |        ');
		console.info('| |_|   ||    ___||    __  ||       ||  _   | |  _   | |   |   |   |   ___  ');
		console.info('|       ||   |___ |   |  | ||   _   || |_|   || |_|   ||   |   |   |  |   | ');
		console.info('|______| |_______||___|  |_||__| |__||_______||_______||___|   |___|  |___| ');
		bot.user.setPresence({
			status: "online",
			activity: {
				name: ".help // Metanora.",
				type: "LISTENING"
			}
		});

		await actionModel.updateMany({ inAction: { $gt: 0 } }, { $set: {inAction: 0} });

		uptimeData = await botUptime.findOne({
			name: 'Dead_rabbit_bot'
		});
		if (!uptimeData) {
			let newUptime = await botUptime.create({
				name: 'Dead_rabbit_bot',
				uptime: 0,
			});
			//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
			newUptime.save();
		}

		//—Ü–∏–∫–ª —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
		setInterval(async function() {
			try {
				//—Å–Ω–∏–º–∞—Ç—å —Ä–æ–ª—å –†–ë, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ
				let memberList = bot.guilds.cache.get(config.serverId).roles.cache.get(config.rbRole).members.map(m => m);

				memberList.forEach(async user => {
					try {
						rbData = await rbModel.findOne({
							userID: user.id,
						});
						if (rbData) {
							let reason = rbData.reason;
							let unrbEmd = new Discord.MessageEmbed()
								.setColor(`${config.defaultColor}`)
								.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –ù–∞–∫–∞–∑–∞–Ω–∏—è‚óû")
								.setFooter(`${user.user.tag}`, `${user.user.displayAvatarURL({dynamic: true})}`)
								.setDescription(`–° ${user} –±—ã–ª–æ —Å–Ω—è—Ç–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ ` + "`" + reason + "`")
								.setTimestamp();

							let userTimeout = rbData.timeout;
							let userGetRb = rbData.rbGet;
							if (Date.now() > (userGetRb + userTimeout)) {
								user.roles.remove(config.rbRole);
								bot.channels.cache.get(config.floodChannel).send(unrbEmd);
							}
						}
					} catch (err) {
						console.log(err);
					}
				});

				bot.channels.cache.filter(c => c.type === 'voice').forEach(async channel => {
					for (let [memberID, member] of channel.members) {
						let uid = memberID;
						if (!member.user.bot) {
							//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–π—Å –∞–∫—Ç–∏–≤–∞
							vctimeData = await vctimeModel.findOne({
								userID: member.id
							});
							//—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–π—Å –∞–∫—Ç–∏–≤–∞
							if (!vctimeData) {
								let vctime = await vctimeModel.create({
									userID: uid,
									vctime: 0,
								});
								//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
								vctime.save();
							}

							//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–π—Å –∞–∫—Ç–∏–≤–∞
							vctimeResponse = await vctimeModel.updateOne({
								userID: uid,
							}, {
								$inc: {
									vctime: 1000
								}
							});
						}
					}
				});

				// const category = await bot.channels.cache.get(config.createChannelCategory);
				// category.children.forEach(channel => {
				//  if (channel.members.size <= 0 && channel.id != config.createChannelId) {
				//      channel.delete()
				//  }
				// });

			} catch (err) {
				if (err.name === "ReferenceError")
					console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
				console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
			}
		}, 1000);
		//–≤—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ —é–∑–µ—Ä–∞–º
		setInterval(async function() {
			let usersInVoiceChannels = [];
			bot.channels.cache.filter(c => c.type === 'voice').forEach(async channel => {
				for (let [memberID, member] of channel.members) {
					if (!member.user.bot) usersInVoiceChannels.push(member.id);
				}
			});
			if (usersInVoiceChannels.length > 0) {
				let randomUserId = usersInVoiceChannels[Math.floor(Math.random() * usersInVoiceChannels.length)];
				let randCoins = Math.floor(Math.random() * 170) + 30;

				let giftEmbed = new Discord.MessageEmbed()
					.setTitle(`‚ô°ìÇÉÀö –ü–æ–¥–∞—Ä–æ–∫‚óû`)
					.setDescription(`**–í–∞–º –ø–æ–¥–∞—Ä–æ–∫. –£ –í–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ.**\n**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ üéÅ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ.**`)
					.setColor(3092790)
					.setTimestamp();

				let giftEmbedSuccess = new Discord.MessageEmbed()
					.setTitle(`‚ô°ìÇÉÀö –ü–æ–¥–∞—Ä–æ–∫‚óû`)
					.setDescription(`**–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!**\n**–ü–æ–ª—É—á–µ–Ω–æ:** ${randCoins} ${config.silverCoin}`)
					.setColor(3092790)
					.setTimestamp();

				let giftEmbedCancel = new Discord.MessageEmbed()
					.setTitle(`‚ô°ìÇÉÀö –ü–æ–¥–∞—Ä–æ–∫‚óû`)
					.setDescription(`**–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –∑–∞–±—Ä–∞–ª–∏.**`)
					.setColor(3092790)
					.setTimestamp();

				const msg = await bot.channels.cache.find(ch => ch.id == config.mainChannel).send(`<@${randomUserId}>`, giftEmbed);
				await msg.react("üéÅ");
				await msg.awaitReactions((reaction, user) => user.id == randomUserId && (reaction.emoji.name == "üéÅ"), {
						max: 1,
						time: 120000
					})
					.then(async collected => {
						if (collected.first().emoji.name == "üéÅ") {

							msg.reactions.removeAll();

							profileData = await profileModel.updateOne({
								userID: randomUserId,
							}, {
								$inc: {
									silverCoins: randCoins,
								}
							});

							msg.edit(giftEmbedSuccess);

							return;
						} else {
							return console.log("–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏");
						}
					}).catch(async err => {
						msg.edit(giftEmbedCancel);
						msg.reactions.removeAll();
						return;
					});
			}
		}, 1000 * 60 * 30 * (Math.floor(Math.random() * 3) + 1));
		//—Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
		setInterval(async function() {
			try {
				bot.channels.cache.filter(c => c.type === 'voice').forEach(async channel => {
					for (let [memberID, member] of channel.members) {
						let uid = memberID;
						//—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–Ω–≥–æ, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
						if (!member.user.bot) {
							//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
							profileData = await profileModel.findOne({
								userID: uid
							});
							//—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
							if (!profileData) {
								let profile = await profileModel.create({
									userID: uid,
									silverCoins: 200,
									goldCoins: 0,
									xp: 0,
									lvl: 1,
									msgs: 0,
									msgsForCoinGet: 0,
									reputation: 0,
									clan: "–ù–µ—Ç",
									marriage: "–ù–µ—Ç",
									profileStatus: config.defaultPStatus,
									profileBanner: config.defaultPBanner,
									profileLine: config.defaultPLine,
									achievements: " ",
								});
								//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
								profile.save();
							}

							//–¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω—É—Ç—É –≤ uptime
							uptimeData = await botUptime.updateOne({
								name: 'Dead_rabbit_bot'
							}, {
								$inc: {
									uptime: 60000,
								}
							});

							//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–µ–±—Ä–∞, –•–† –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–æ–π—Å–µ
							let userClan = profileData.clan;
							let clanCoinBoost = 1;
							let clanLvlBoost = 1;
							if (!(userClan == "" || userClan == " " || userClan == null || userClan == "–ù–µ—Ç")) {
								clanData = await clanModel.findOne({
									name: userClan
								});
								if (clanData) {
									clanCoinBoost = clanData.coinMultiply;
									clanLvlBoost = clanData.lvlMultiply;
								}
							}
							profileData = await profileModel.updateOne({
								userID: uid,
							}, {
								$inc: {
									silverCoins: 2 * clanCoinBoost,
									xp: 2 * clanLvlBoost,
									reputation: 1
								}
							});

							let userXP = profileData.xp;
							let userLvl = profileData.lvl;

							if (userXP >= 100 * userLvl) {
								xpAddResponce = await profileModel.updateOne({
									userID: uid,
								}, {
									$set: {
										xp: 0
									},
									$inc: {
										lvl: 1
									}
								});
							}

							vctimeData = await vctimeModel.findOne({
								userID: uid
							});
							let uservctime = 0;
							uservctime = vctimeData.vctime;
							let nextvoicelvl = 180000000;
							if (uservctime >= nextvoicelvl && !member.roles.cache.has(config.newVoiceLvlRole)) {
								member.roles.add(config.newVoiceLvlRole);

								let newVoiceLvl = new Discord.MessageEmbed()
									.setColor(`${config.defaultColor}`)
									.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!‚óû")
									.setDescription(`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **–≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è** –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–ª—è –í–∞—Å –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã!\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Metanora!`)
									.setTimestamp();

								bot.channels.cache.get(config.floodChannel).send(`<@${uid}>`, newVoiceLvl);
							}

							//–∫–ª–∞–Ω—ã –∏ –æ–ø—ã—Ç –∫–ª–∞–Ω–∞
							if (!(userClan == "" || userClan == " " || userClan == null || userClan == "–ù–µ—Ç")) {
								clanData = await clanModel.findOne({
									name: userClan
								});
								if (clanData) {
									//–Ω–∞–π—Ç–∏ –∫–ª–∞–Ω, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
									clanData = await clanModel.updateOne({
										name: userClan,
									}, {
										$inc: {
											xp: 2
										}
									});
									clanData = await clanModel.findOne({
										name: userClan
									});
									let clanXp = clanData.xp;
									let clanLvl = clanData.level;

									let clanMembers = clanData.members;
									let clanOfficers = clanData.officers;
									let memberAmount = clanMembers.length + clanOfficers.length;
									let clanxpmult = 1;
									if (Math.floor(memberAmount / 2) > 0) {
										clanxpmult = Math.floor(memberAmount / 2);
									}
									if (clanXp >= (xplvlmult * clanLvl * clanxpmult)) {
										clanData = await clanModel.updateOne({
											name: userClan,
										}, {
											$set: {
												xp: 0
											},
											$inc: {
												level: 1
											}
										});
									}
								} else {
									console.warn("No Data about clan: " + userClan);
								}
							}
							if ((Date.now() - member.joinedAt) > 7776000000 && !member.roles.cache.has(config.nativeRole)) {
								member.roles.add(config.nativeRole);
							}
						}
					}
				});

				//–ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–æ–∫
				//NOTE: –£–ë–†–ê–¢–¨ –ò –ù–ê–ü–ò–°–ê–¢–¨ 1—Å –¶–ò–ö–õ –ü–û–î –£–î–ê–õ–ï–ù–ò–ï –ü–£–°–¢–´–• –í–û–ô–°–û–í
				//NOTE: –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–∏–≤–∞—Ç–∫–∏ –ª–∏–≤–∞–µ—Ç —Å –ø—Ä–∏–≤–∞—Ç–∫–∏ - –æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
				// bot.channels.cache.filter(channel => channel.id === config.createChannelCategory).forEach(channel => {
				//  if (channel.children.size <= 1) {
				//      bot.channels.cache.find(ch => ch.id == config.createChannelId).overwritePermissions([{
				//          id: `${config.everyoneID}`,
				//          allow: ['CONNECT']
				//      }]);
				//  }
				// });
			} catch (err) {
				if (err.name === "ReferenceError")
					console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
				console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
			}
		}, 60000);
		bot.channels.cache.get(config.verificationChannel).messages.fetch(config.verificationMessage).then(m => {
			m.react("‚úÖ");
		});
		reactrole.forEach(obj => {
			bot.channels.cache.get(obj.channelID).messages.fetch(obj.messageID).then(m => {
				m.react(obj.emoji).catch(err => {console.log(err);})
			})
		})

		serverClans = await clanModel.find({});
		if (serverClans.length > 0) {
			serverClans.forEach(async obj => {
				if (obj.underAttack == 1) {
					let errOfAttack = new Discord.MessageEmbed()
						.setColor(`${config.errColor}`)
						.setTitle("‚∏ù‚∏ù X ‚ÇäÀö –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞‚óû")
						.setDescription(`**–ë–æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, –∞ –∞—Ç–∞–∫–∞ –Ω–∞ –≤–∞—à –∫–ª–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.**`)
						.setTimestamp();
					bot.channels.cache.find(ch => ch.id == obj.clanChat).send(errOfAttack);
					clanData = await clanModel.updateOne({
						userID: obj.userID
					}, {
						$set: {
							underAttack: 0
						}
					});
					console.info('---CLAN DEBUG---');
					console.info(`'underAttack' FOR CLAN ${obj.name} (${obj.userID}) IS FIXED AND SET TO '0'`);
					console.info('---CLAN DEBUG---');
				}
			});
		}
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

bot.on("messageReactionAdd", async (reaction, user) => {
	try {
		if (!user || user.bot || !reaction.message.channel.guild) return;
		let msg = reaction.message;
		let member = bot.guilds.cache.get(config.serverId).members.cache.get(user.id);
		if (msg.id == config.verificationMessage && msg.channel.id == config.verificationChannel) {
			if (member.roles.cache.has(config.nonverifiedUserRole)) {
				member.roles.remove(config.nonverifiedUserRole).then(c => {
					let embed = new Discord.MessageEmbed()
						.setColor(config.defaultColor)
						.setTitle('‚∏ù‚∏ù ‚ô°‚ÇäÀö –í—Å—Ç—Ä–µ—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!‚óû')
						.setDescription(`–ü—Ä–∏–≤–µ—Ç, ${member.user.username}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–≤–Ω—ã–π –Ω–æ–≤—ã–π –º–∏—Ä! –ß—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞. –ß—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –ª–µ–≥—á–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ—á–∏—Ç–∞–π <#1013156890617839778> –∏ <#1013157100672790558>`)
						.setFooter(`${member.user.username}`, `${member.user.displayAvatarURL({dynamic: true})}`)
						.setThumbnail(`${member.user.displayAvatarURL({dynamic: true})}`)
						.setTimestamp();

					member.guild.channels.cache.get(config.mainChannel).send(embed);
					const welcomeMessageWelc = [`–ü—Ä–∏–≤–µ—Ç, ${member}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä Metanora.`, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ${member}, –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä Metanora.`, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Metanora, ${member}.`, `${member}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä Metanora.`, `–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π ${member}. –¢—ã –Ω–æ–≤–µ–Ω—å–∫–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Metanora?`, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Metanora, ${member}!`, `${member}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–≤–Ω—ã–π –Ω–æ–≤—ã–π –º–∏—Ä, –¥—Ä—É–≥!`, `${member}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –Ω–æ–≤–æ–º –¥–∏–≤–Ω–æ–º –º–∏—Ä–µ!`]
					const welcomeMessageName = [`–ú–µ–Ω—è –∑–æ–≤—É—Ç Mate.`, `–Ø - Mate.`, `–ú–æ–∂–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è Mate.`, `–ú–æ–∂–µ—à—å –∑–≤–∞—Ç—å –º–µ–Ω—è Mate.`, `–¢–≤–æ—ë –∏–º—è –º—ã —É–∂–µ –∑–Ω–∞–µ–º, –∞ –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∑—ã–≤–∞—Ç—å Mate.`, `–ö–∞–∫ –¥–µ–ª–∞? –ú–µ–Ω—è –∑–æ–≤—É—Ç Mate.`, `–ú–µ–Ω—è –Ω–∞–∑—ã–≤–∞—é—Ç Mate.`];
					const welcomeMessageLittleAbout = [`–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º –ø–æ –¥–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.`, `–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Å–µ—Ä–≤–µ—Ä–∞!`, `–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å —Ç–µ–±–µ –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.`, `–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`, `–Ø –±—É–¥—É –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º.`, `–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º.`, `–¢–µ–ø–µ—Ä—å —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≥–∏–¥ –ø–æ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —Ç—É—Ç –µ—Å—Ç—å.`, `–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.`];
					const welcomeMessageEnding = [`–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π –µ–≥–æ –º–Ω–µ!`, `–ï—Å–ª–∏ —É —Ç–µ–±—è –±—É–¥—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, —Ç–æ –∑–∞–¥–∞–≤–∞–π –∏—Ö –º–Ω–µ!`, `–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Å–µ—Ä–≤–µ—Ä—É, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ.`, `–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è —á—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å –æ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–æ —Å–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è –∏ —è –æ—Ç–≤–µ—á—É!`, `–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å–µ—Ä–≤–µ—Ä–∞, —Ç–æ —Å–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è!`, `–ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á–µ–º —Ç—ã –º–æ–∂–µ—à—å —Ç—É—Ç –∑–∞–Ω—è—Ç—å—Å—è - –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ.`, `–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –æ —Å–µ—Ä–≤–µ—Ä–µ - —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è!`, `–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–µ—Ä–≤–µ—Ä–∞ - —É–∑–Ω–∞–π —É –º–µ–Ω—è!`];
					const welcomeMessageExamples = [`<@${config.botId}> –∫–∞–∫ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω?`, `<@${config.botId}> —á–µ–º —Ç—É—Ç –∑–∞–Ω—è—Ç—å—Å—è?`, `<@${config.botId}> —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.`, `<@${config.botId}> –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?`, `<@${config.botId}> –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–∫—É?`, `<@${config.botId}> –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ª—é–±–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É?`];
					let welcomeMessage = welcomeMessageWelc[Math.floor(Math.random() * welcomeMessageWelc.length)] + ' ' + welcomeMessageName[Math.floor(Math.random() * welcomeMessageName.length)] + ' '  + welcomeMessageLittleAbout[Math.floor(Math.random() * welcomeMessageLittleAbout.length)] + ' ' + welcomeMessageEnding[Math.floor(Math.random() * welcomeMessageEnding.length)] + '\n' + '–ü—Ä–∏–º–µ—Ä: ' + welcomeMessageExamples[Math.floor(Math.random() * welcomeMessageExamples.length)];
					member.guild.channels.cache.get(config.mainChannel).send(welcomeMessage);
				});
			}
		}
		let indexes = [];
		for (let i = 0; i < reactrole.length; i++) {
			if (reactrole[i].messageID == msg.id) indexes.push(i);
		}
		indexes.forEach(index => {
			let emojiName = reactrole[index].emoji.split(":");
			emojiName = emojiName[1];
			if (msg.id == reactrole[index].messageID && reactrole[index].channelID == msg.channel.id && member.roles.cache.has(reactrole[index].roleID) && reactrole[index].single == 1 && (reactrole[index].emoji != reaction.emoji.name || emojiName != reaction.emoji.name)) {
				member.roles.remove(reactrole[index].roleID);
			}
			if (msg.id == reactrole[index].messageID && reactrole[index].channelID == msg.channel.id && (reactrole[index].emoji == reaction.emoji.name || emojiName == reaction.emoji.name)) {
				if (reactrole[index].type == 0 || reactrole[index].type == 1) {
					member.roles.add(reactrole[index].roleID);
				} else if (reactrole[index].type == 2) {
					member.roles.remove(reactrole[index].roleID);
					msg.reactions.cache.find(r => r.emoji.name == reaction.emoji.name).users.remove(member);
				}
			}
		});
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

bot.on("messageReactionRemove", async (reaction, user) => {
	try {
		if (!user || user.bot || !reaction.message.channel.guild) return;
		let msg = reaction.message;
		let msgReactIndex = reactrole.findIndex(x => x.messageID === msg.id);
		let member = bot.guilds.cache.get(config.serverId).members.cache.get(user.id);

		let indexes = [];
		for (let i = 0; i < reactrole.length; i++) {
			if (reactrole[i].messageID == msg.id) indexes.push(i);
		}
		indexes.forEach(index => {
			let emojiName = reactrole[index].emoji.split(":");
			emojiName = emojiName[1];
			if (msg.id == reactrole[index].messageID && reactrole[index].channelID == msg.channel.id && (reactrole[index].emoji == reaction.emoji.name || emojiName == reaction.emoji.name) && (reactrole[index].type == 0 || reactrole[index].type == 2)) {
				member.roles.remove(reactrole[index].roleID);
			}
		});
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

//–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∏ –í–´–•–û–î–ï —é–∑–µ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
bot.on('guildMemberRemove', async member => {
	try {
		let uid = member.id;
		//–£–¥–∞–ª—è—Ç—å –±—Ä–∞–∫
		profileData = await profileModel.findOne({
			userID: uid
		});
		let userMarriage = profileData.marriage;
		if (!(userMarriage == "" || userMarriage == " " || userMarriage == null || userMarriage == "–ù–µ—Ç")) {
			profileData = await profileModel.updateOne({
				userID: uid,
			}, {
				$set: {
					marriage: "–ù–µ—Ç"
				}
			});

			profileData = await profileModel.updateOne({
				userID: userMarriage,
			}, {
				$set: {
					marriage: "–ù–µ—Ç"
				}
			});

			let divorceByLeave = new Discord.MessageEmbed()
				.setColor(`${config.defaultColor}`)
				.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –ë—Ä–∞–∫–∏‚óû")
				.setDescription(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä –≤—ã—à–µ–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–∞—à –±—Ä–∞–∫ –±—ã–ª —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.`)
				.setTimestamp();

			bot.users.cache.get(userMarriage).send(divorceByLeave);
			bot.guilds.cache.get(config.serverId).members.cache.get(userMarriage).roles.remove(config.inLoveRole);

			let loveroomId = 0;
			clrData = await loveroomModel.findOne({
				userID: uid
			});
			if (clrData) {
				loveroomId = clrData.loveroomID;
				if (!(loveroomId == 0)) {
					clrResponce = await loveroomModel.updateOne({
						userID: uid,
					}, {
						$set: {
							loveroomID: 0,
							loveroomTimestamp: 0,
							loveroomLastpayment: 0
						}
					});

					clrResponce = await loveroomModel.updateOne({
						userID: userMarriage,
					}, {
						$set: {
							loveroomID: 0,
							loveroomTimestamp: 0,
							loveroomLastpayment: 0
						}
					});

					bot.channels.cache.get(loveroomId).delete();
				}
			}
		}

		//—É–¥–∞–ª—è—Ç—å –∫–ª–∞–Ω –∏–ª–∏ —É–±–∏—Ä–∞—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –∫–ª–∞–Ω–∞
		let userClan = profileData.clan;
		if (!(userClan == "" || userClan == " " || userClan == null || userClan == "–ù–µ—Ç")) {
			ownClanData = await clanModel.findOne({
				userID: uid
			})
			if (ownClanData) {
				let clanMembers = ownClanData.members;
				let clanOfficers = ownClanData.officers;
				let clanRoleId = ownClanData.clanRole;
				let clanName = ownClanData.name;

				clanDeleteResponce = await clanModel.deleteOne({
					userID: uid
				});

				profileData = await profileModel.updateOne({
					userID: uid,
				}, {
					$set: {
						clan: "–ù–µ—Ç"
					}
				});

				if (clanMembers.length > 0) {
					clanMembers.forEach(async user => {
						try {
							profileData = await profileModel.updateOne({
								userID: user.memberID,
							}, {
								$set: {
									clan: "–ù–µ—Ç"
								}
							});
						} catch (err) {
							if (err.name === "ReferenceError")
								console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
							console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
						}
					})
				}
				if (clanOfficers.length > 0) {
					clanOfficers.forEach(async user => {
						try {
							profileData = await profileModel.updateOne({
								userID: user.memberID,
							}, {
								$set: {
									clan: "–ù–µ—Ç"
								}
							});
						} catch (err) {
							if (err.name === "ReferenceError")
								console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
							console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
						}
					})
				}

				message.guild.roles.cache.get(clanRoleId).delete();

				message.guild.channels.cache.forEach((channel) => {
					if (channel.name == clanName)
						channel.delete()
						.catch((e) => console.log(`Could not delete ${channel.name} because of ${e}`))
				});
			} else {
				clanData = await clanModel.findOne({
					name: userClan
				});
				let clanName = clanData.name;
				let clanMembers = clanData.members;
				let clanOfficers = clanData.officers;

				let membersArray = clanMembers;
				let officersArray = clanOfficers;

				let indexMember = membersArray.findIndex(x => x.memberID === uid);
				let indexOfficer = officersArray.findIndex(x => x.memberID === uid);

				profileData = await profileModel.updateOne({
					userID: uid,
				}, {
					$set: {
						clan: "–ù–µ—Ç"
					}
				});

				if (indexMember > -1) {
					membersArray.splice(indexMember, 1);
					clanData = await clanModel.updateOne({
						name: clanName,
					}, {
						$set: {
							members: membersArray
						}
					});
				} else {
					officersArray.splice(indexOfficer, 1);
					clanData = await clanModel.updateOne({
						name: clanName,
					}, {
						$set: {
							officers: officersArray
						}
					});
				}

				bot.channels.cache.find(ch => ch.name == clanName && ch.type == 'voice').permissionOverwrites.get(uid).delete();
				bot.channels.cache.find(ch => ch.name == clanName && ch.type == 'text').permissionOverwrites.get(uid).delete();
			}
		}
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}

});

//–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∏ –í–•–û–î–ï —é–∑–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
bot.on('guildMemberAdd', async member => {
	try {
		//–≤—ã–∫–∏–Ω—É—Ç—å —é–∑–µ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
		if (member.user.createdTimestamp > Date.now() - (1000 * 60 * 60 * 24 * 7)) {
			let accountKick = new Discord.MessageEmbed()
				.setColor(config.defaultColor)
				.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö Metanora‚óû")
				.setDescription(`–í—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ **Metanora.**\n\n–ü—Ä–∏—á–∏–Ω–∞: –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥.\n\n–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [noir#7054](https://discordapp.com/users/926534038188089476)`)
				.setTimestamp();
			bot.users.cache.get(member.user.id).send(accountKick).then(() => {
				member.kick();
			});
		}
		//—á–µ–∫–Ω—É—Ç—å –Ω–µ –±–æ—Ç –ª–∏ —é–∑–µ—Ä, —á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –∑–∞—Å–∏—Ä–∞—Ç—å –ë–î
		if (member.user.bot) return;
		let uid = member.id;
		//—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
		//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
		profileData = await profileModel.findOne({
			userID: member.id
		});
		//—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
		if (!profileData) {
			let profile = await profileModel.create({
				userID: uid,
				silverCoins: 200,
				goldCoins: 0,
				xp: 0,
				lvl: 1,
				msgs: 0,
				msgsForCoinGet: 0,
				reputation: 0,
				clan: "–ù–µ—Ç",
				marriage: "–ù–µ—Ç",
				profileStatus: config.defaultPStatus,
				profileBanner: config.defaultPBanner,
				profileLine: config.defaultPLine,
				achievements: " ",
			});
			//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
			profile.save();
		}

		//–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
		//NOTE: —Å–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
		member.roles.add(config.nonverifiedUserRole);
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

// bot.on('presenceUpdate', (oldMember, newMember) => {
//   const playingRole = guild.roles.find(role => role.id === 'PLAYING ROLE ID');

//   if (newMember.user.bot || newMember.presence.clientStatus === 'mobile' || oldMember.presence.status !== newMember.presence.status) return;

//   const oldGame = oldMember.presence.game && [0, 1].includes(oldMember.presence.game.type) ? true : false;
//   const newGame = newMember.presence.game && [0, 1].includes(newMember.presence.game.type) ? true : false;

//   if (!oldGame && newGame) {         // Started playing.
//     newMember.addRole(playingRole)
//       .then(() => console.log(`${playingRole.name} added to ${newMember.user.tag}.`))
//       .catch(console.error);
//   } else if (oldGame && !newGame) {  // Stopped playing.
//     newMember.removeRole(playingRole)
//       .then(() => console.log(`${playingRole.name} removed from ${newMember.user.tag}.`))
//       .catch(console.error);
//   }
// });

//chat log
bot.on('messageDelete', async message => {
	try {
		if (message.author.bot) return;
		let deletedMessage = new Discord.MessageEmbed()
			.setTitle("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:")
			.setColor(config.defaultColor)
			.setDescription(`**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** ${message.content} \n**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** ${message.author.tag} (${message.author.id})`)
			.setFooter(`${message.author.tag}`, `${message.author.displayAvatarURL({ format: "png", dynamic: true })}`)
			.setTimestamp(message.createdAt)
		bot.channels.cache.get(config.chatLogChannel).send(deletedMessage);
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

bot.on('message', async message => {
	try {
		const isInvite = async (guild, code) => {
			return await new Promise((resolve) => {
				guild.fetchInvites().then((invites) => {
					for (const invite of invites) {
						if (code === invite[0]) {
							resolve(true)
							return
						}
					}
					resolve(false)
				})
			})
		}
		const {
			guild,
			member,
			content
		} = message

		const code = content.split('discord.gg/')[1]

		if (content.includes('discord.gg/')) {
			const isOurInvite = await isInvite(guild, code)
			if (!isOurInvite) {
				let antiad = new Discord.MessageEmbed()
					.setColor(config.warnColor)
					.setTitle("üõë –†–ï–ö–õ–ê–ú–ê üõë")
					.setDescription(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.author} (id: ${message.author.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä (${message})`)
					.setFooter(`${message.author.tag}`, `${message.author.displayAvatarURL({dynamic: true})}`)
					.setTimestamp();
				bot.channels.cache.get(config.chatLogChannel).send(antiad);
				message.delete();
			}
		}
		if (message.author.bot) return;
		if (message.channel.type == "dm") return;
		let uid = message.author.id;
		let msgAuthor = message.author;
		profileData = await profileModel.findOne({
			userID: uid
		});
		if (!profileData) {
			let profile = await profileModel.create({
				userID: uid,
				silverCoins: 200,
				goldCoins: 0,
				xp: 0,
				lvl: 1,
				msgs: 0,
				msgsForCoinGet: 0,
				reputation: 0,
				clan: "–ù–µ—Ç",
				marriage: "–ù–µ—Ç",
				profileStatus: config.defaultPStatus,
				profileBanner: config.defaultPBanner,
				profileLine: config.defaultPLine,
				achievements: " ",
			});
			profile.save();
		}
		//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–π—Å –∞–∫—Ç–∏–≤–∞
		vctimeData = await vctimeModel.findOne({
			userID: member.id
		});
		//—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–æ–π—Å –∞–∫—Ç–∏–≤–∞
		if (!vctimeData) {
			let vctime = await vctimeModel.create({
				userID: uid,
				vctime: 0,
			});
			//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
			vctime.save();
		}
		//–≤—ã–¥–∞–≤–∞—Ç—å —Ä–æ–ª—å darkness
		const now = new Date();
		if ((now.getUTCHours() >= 20 && now.getUTCHours() <= 24) || (now.getUTCHours() >= 0 && now.getUTCHours() <= 6)) {
			if (!message.member.roles.cache.has(config.darknessRole)) {
				message.member.roles.add(config.darknessRole);
			}
		}

		//–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–∏–Ω—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
		let userClan = "–ù–µ—Ç";
		userClan = profileData.clan;
		let clanCoinBoost = 1;
		let clanLvlBoost = 1;
		if (!(userClan == "" || userClan == " " || userClan == null || userClan == "–ù–µ—Ç")) {
			clanData = await clanModel.findOne({
				name: userClan
			});
			if (clanData) {
				clanCoinBoost = clanData.coinMultiply;
				clanLvlBoost = clanData.lvlMultiply;
			}
		}
		profileData = await profileModel.findOne({
			userID: uid
		});
		if (profileData) {
			profileData = await profileModel.updateOne({
				userID: uid,
			}, {
				$inc: {
					msgs: 1,
					msgsForCoinGet: 1,
					xp: 1 * clanLvlBoost
				}
			});
		}

		profileData = await profileModel.findOne({
			userID: uid
		});
		let userXP = profileData.xp;
		let userLvl = profileData.lvl;
		let msgsForCoinGet = profileData.msgsForCoinGet;

		if (userXP >= 100 * userLvl) {
			xpAddResponce = await profileModel.updateOne({
				userID: uid,
			}, {
				$set: {
					xp: 0
				},
				$inc: {
					lvl: 1
				}
			});
		}
		if (msgsForCoinGet >= 3) {
			coinAddResponce = await profileModel.updateOne({
				userID: uid,
			}, {
				$set: {
					msgsForCoinGet: 0
				},
				$inc: {
					silverCoins: 1 * clanCoinBoost
				}
			});
		}
		//–ß–∞—Ç-–±–æ—Ç Metanora | –í–µ—Ä—Å–∏—è 1.0
		let mUser = message.guild.member(message.mentions.users.first());
		const answerForUser = ["–Ø –Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä–∏—Ç—å.", "–ù–µ –ø–∏–Ω–≥—É–π –º–µ–Ω—è, —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.", "–ù–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è –ø–∏–Ω–≥–æ–≤–∞—Ç—å!", "–ù–µ –ø–∏–Ω–≥—É–π –º–µ–Ω—è, –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä—É.", "–ù–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è, —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç.", "–û—Ç—Å—Ç–∞–Ω—å. –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç. –Ø –Ω–µ –º–æ–≥—É —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è.", "–ù–µ. –ü–∏–Ω–≥—É–π. –ú–µ–Ω—è. –Ø. –ó–∞–Ω—è—Ç!!!", "–°–ª—É—à–∞–π, —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç. –Ø –≤—Å–µ–º —ç—Ç–æ –º–Ω–æ–≥–æ —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏–ª. –ù–µ –Ω—É–∂–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è.", "–Ø –∑–∞–Ω—è—Ç —Ç–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã. –ù–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è –ø–∏–Ω–≥–æ–≤–∞—Ç—å."];
		const answerForCreator = ["–ó–∞–ª–µ–∑—å –≤ –∫–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏! –ö–∞–∫–∏–µ –∫–æ –º–Ω–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?", "–•–≤–∞—Ç–∏—Ç –º–µ–Ω—è –ø–∏–Ω–≥–æ–≤–∞—Ç—å, –ö—Ä–∏—Å!", "–¢—ã —Å–∞–º –Ω–∞–∫–æ—Å—è—á–∏–ª, –∞ —Ç–µ–ø–µ—Ä—å —Å –º–µ–Ω—è —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏—à—å.", "–ù–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è –ø–∏–Ω–≥–æ–≤–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ —Ä–∞–∑.\n–ò —è –Ω–µ –∑–Ω–∞—é, —ç—Ç–æ –¥–≤–∞. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ–±–µ.", "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º—É –∫–æ–¥—É, –∞ –Ω–µ –∫–æ –º–Ω–µ.", "–Ø –≤—Å–µ–≥–æ –ª–∏—à—å –º–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã ‚ô•", "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç –º–µ–Ω—è? –¢—ã –º–µ–Ω—è –Ω–∞–ø–∏—Å–∞–ª, –∞ —Ç–µ–ø–µ—Ä—å –∂–∞–ª—É–µ—à—å—Å—è?"];
		const answerForToxic = ["–î–æ–±—Ä–∞ –∏ –ø–æ-–∑–∏-—Ç–∏-–≤–∞!", "–ù–∏—á–µ–≥–æ.", "–£ —Ç–µ–±—è –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ?", "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –Ω–∞–≥—Ä—É–±–∏—Ç—å –±–æ—Ç—É?", "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –≤—Å—ë –ø–æ–Ω–∏–º–∞—é, –Ω–æ —Ç–∞–∫ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É...", "–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —É —Ç–µ–±—è –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.", "–¢—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —è –ø—Ä–æ—Å—Ç–æ –±–µ–∑–¥—É—à–Ω–∞—è –º–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º? –ê... –¢—ã —Ç–æ–∂–µ...", "–ü–æ–≤—Ç–æ—Ä–∏ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–æ–Ω—è–ª.", "–ë–∏–ø-–±—É–ø-–±–∏–ø, –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å —á—É—à—å –±–æ—Ç—É.", "–ù–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ–∫.", "–î–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Å—è.", "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ—Å–∫–æ—Ä–±–∏—Ç—å —ç—Ç–∏–º –º–µ–Ω—è –∏–ª–∏ —Å–µ–±—è?"];
		const answerForLove = ["<3", "‚ô•", "üòò", "—Ü—ë–º :3", "—á–º–æ–∫ –≤ —É—à–∫–æ :*", "üíï", "üíö", "üíõ", "üß°", "–õ—é–±–ª—é —Ç–µ–±—è <3"];
		const answerForExcuse = ["–ò–∑–≤–∏–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã.", "–ü—Ä–æ—â–∞—é, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫ —Å –∫–æ—Å—Ç—è–º–∏.", "–ù–µ—Ç —Ç–µ–±–µ –ø—Ä–æ—â–µ–Ω—å—è.", "–ê–≥–∞.", "–ù–µ –ø—Ä–æ—â—É!", "–ü—Ä–æ—â–∞—é <3", "–•–æ—Ä–æ—à–æ. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –ø—Ä–æ—â—É —Ç–µ–±—è.", "–ò–∑–≤–∏–Ω—è—é.", "–ù–µ—Ç.", "–ü—Ä–æ—â–∞—é."];
		const answerForClan = ["–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞–ø–∏—Å–∞–≤ `.clan help`", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–∞—Ö —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ `.clan help`"];
		const answerForPR = ['–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É - –∑–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª <#1013346967562235955> –∏ —Ç–≤–æ—è –∫–æ–º–Ω–∞—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ –º–æ–º–µ–Ω—Ç. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –Ω–∞–ø–∏—à–µ—à—å `.vc`!']
		const answerForLoveRoom = ["–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª—é–±–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É - —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å `.clr`."];
		const answerForCommands = ["–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ `.help`", "–¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—Å–∞–≤ `.help`", "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ª–∏—Å—Ç –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å `.help`"];
		const answerForFeatures = ["–°–µ—Ä–≤–µ—Ä Metanora - —ç—Ç–æ –æ–±—à–∏—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±–¥—É–º—ã–≤–∞–ª—Å—è –æ–æ–æ—á–µ–Ω—å –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è. –ì–ª–∞–≤–Ω–æ–π —Ñ–∏—à–∫–æ–π —Å–µ—Ä–≤–µ—Ä–∞ —è–≤–ª—è—é—Å—å —è - –±–æ—Ç Mate. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ —Ç—É—Ç –º–µ—Å—Ç–æ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞—Ö–æ–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ª–∏—Å—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ? –ù–∞–ø–∏—à–∏ `.help`!"];
		const answerForEvents = ["–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞—á–∏–Ω–∞—è –æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏–ª–∏ –∏–≥—Ä –≤ –º–∞—Ñ–∏—é –∏ —Ç.–ø., –¥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ CS:GO, Valorant –∏ —Ä–∞–∑–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∏–≥—Ä. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏ –∑–∞ –Ω–∞—à–∏–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤–∫—É—Ä—Å–µ!"];
		const answerForReact = ["–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∞–∫—Ü–∏–π —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤ `.rlist`", "–¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞–ø–∏—Å–∞–≤ `.rlist`", "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ª–∏—Å—Ç —Ä–µ–∞–∫—Ü–∏–π, –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å `.rlist`"];
		const didntGetQuest = ["–¢–∞–∫... –ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É.", "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–∞—á–µ.", "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ.", "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —á—Ç–æ? –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç –∏ –∏–Ω–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å.", "–£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–∞—á–µ.", "–ò–∑–≤–∏–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.", "–ò–∑–≤–∏–Ω–∏, —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ-–¥—Ä—É–≥–æ–º—É!"];
		const answerForRude = ["–ü–µ—Ä–µ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞, –¥—Ä—É–≥.", "–ù–µ –≥—Ä—É–±–∏.", "–î–∞–≤–∞–π –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–µ–π.", "–ù–µ –Ω—É–∂–Ω–æ —Ç–∞–∫.", "–ü–µ—Ä–µ—Å—Ç–∞–Ω—å –≥—Ä—É–±–∏—Ç—å."];
		const answerForRoles = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ <#1013157100672790558>", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ? <#1013157100672790558>", "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ <#1013157100672790558>", "–í—Å–µ —Ä–æ–ª–∏ —Ç—É—Ç: <#1013157100672790558>"];
		const answerForHRU = ["–û—Ç–ª–∏—á–Ω–æ!", "–í—Å—ë —Ö–æ—Ä–æ—à–æ!", "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ó–∞–Ω–∏–º–∞—é—Å—å —Ç–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã.", "–°—É–ø–µ—Ä!", "–ë–∏–ø-–±—É–ø-–±–∏–ø... *–∑–≤—É–∫–∏ –ø–µ—á–∞—Ç–∏* –í—Å—ë —Ö–æ—Ä–æ—à–æ, –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫ —Å –∫–æ—Å—Ç—è–º–∏!"];
		const answerForWhereCommands = ["–î–ª—è –∫–æ–º–∞–Ω–¥ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç <#1013149653287567490>", "–ü–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å—é–¥–∞: <#1013149653287567490>"];
		const answerForAboutMe = ["–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –ú–µ–Ω—è –∑–æ–≤—É—Ç `Mate`! –Ø –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –±–æ—Ç–æ–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ–ª—å–∫–æ —è –∏–º–µ—é —á—É–≤—Å—Ç–≤–∞ –∏ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –í–∞–º –ø–æ–º–æ—á—å. –ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏ –¥–æ —Å–∏—Ö –ø–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Kristopher. –í –∫–∞–∫–æ–º-—Ç–æ —Å–º—ã—Å–ª–µ, —è - –µ–≥–æ —Ä–µ–±—ë–Ω–æ–∫. –í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —è —É–º–µ—é –∏ –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –µ—Å–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `.help`."]
		const answerForSelfie = ["–°–≤–æ–∏ —Ñ–æ—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç <#1013156050003836938>", "–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç—É—Ç: <#1013156050003836938>"];
		if (mUser) {
			if (mUser.id == bot.user.id) {
				let mtl = message.content.toLowerCase();
				if (mtl.includes("–∫–∞–∫ ") || mtl.includes("–∫–∞–∫–∏–º ")) {
					if (mtl.includes("—Å–æ–∑–¥–∞—Ç—å") || mtl.includes("—Å–¥–µ–ª–∞—Ç—å") || mtl.includes("–æ—Ç–∫—Ä—ã—Ç—å") || mtl.includes("–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å") || mtl.includes("–æ—Ç–∫—Ä—ã—Ç—å") || mtl.includes("–∑–∞–¥–µ–ª–∞—Ç—å") || mtl.includes("–∑–¥–µ–ª–∞—Ç—å")) {
						if (mtl.includes("–∫–ª–∞–Ω") || mtl.includes("—Å–µ–º—å—é") || mtl.includes("–≥–∏–ª—å–¥–∏—é") || mtl.includes("–≥–∏–ª—å–¥–∏—è") || mtl.includes("—Å–µ–º—å—è")) {
							message.channel.send(answerForClan[Math.floor(Math.random() * answerForClan.length)]);
						} else if (mtl.includes("–ø—Ä–∏–≤–∞—Ç–∫—É") || mtl.includes("–ø—Ä–∏–≤–∞—Ç–∫–∞") || mtl.includes("–∫–æ–º–Ω–∞—Ç–∞") || mtl.includes("–∫–æ–º–Ω–∞—Ç—É") || mtl.includes("–ø—Ä–∏–≤–∞—Ç–Ω—É—é") || mtl.includes("–ª–∏—á–Ω–∞—è") || mtl.includes("–ª–∏—á–Ω—É—é") || mtl.includes("–∫–æ–º–Ω–∞—Ç—ã") || mtl.includes("–ª–∏—á–Ω—ã–µ") || mtl.includes("–∑–∞–∫—Ä—ã—Ç—É—é")) {
							message.channel.send(answerForPR[Math.floor(Math.random() * answerForPR.length)]);
						} else if (mtl.includes("–ª–∞–≤–∫—É") || mtl.includes("–ª–∞–≤—Ä—É–º—É") || mtl.includes("–ª–∞–≤ —Ä—É–º—É") || mtl.includes("–ª—é–±–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É") || mtl.includes("–ª—é–±–æ–≤–Ω—É—é") || mtl.includes("–ª—é–±–æ–≤–Ω–∞—è") || mtl.includes("–ª–∞–≤")) {
							message.channel.send(answerForLoveRoom[Math.floor(Math.random() * answerForLoveRoom.length)]);
						}
					} else if (mtl.includes("–¥–µ–ª–∞")) {
						message.channel.send(answerForHRU[Math.floor(Math.random() * answerForHRU.length)])
					} else {
						message.channel.send(didntGetQuest[Math.floor(Math.random() * didntGetQuest.length)]);
					}
				} else if (mtl.includes("–ø—Ä–æ—Å—Ç–∏") || mtl.includes("–∏–∑–≤–∏–Ω–∏") || mtl.includes("–∏–∑–≤–∏–Ω—è–π") || mtl.includes("–ø—Ä–æ—â–µ–Ω–∏—è") || mtl.includes("–ø—Ä–æ—â–µ–Ω—å—è") || mtl.includes("–∏–∑–≤–∏–Ω—è—é—Å—å") || mtl.includes("—Å–æ—Ä–∏") || mtl.includes("—Å–æ—Ä—Ä–∏")) {
					message.channel.send(answerForExcuse[Math.floor(Math.random() * answerForExcuse.length)]);
				} else if (mtl.includes("–∫—É–¥–∞")) {
					if (mtl.includes("–∫–æ–º–∞–Ω–¥")) {
						message.channel.send(answerForWhereCommands[Math.floor(Math.random() * answerForWhereCommands.length)]);
					} else if (mtl.includes("—Å–µ–ª—Ñ–∏") || mtl.includes("—Å—ç–ª—Ñ–∏") || mtl.includes("—Ñ–æ—Ç–æ") || mtl.includes("—Ñ–æ—Ç–∫–∏")) {
						message.channel.send(answerForSelfie[Math.floor(Math.random() * answerForSelfie.length)]);
					} else {
						message.channel.send(didntGetQuest[Math.floor(Math.random() * didntGetQuest.length)]);
					}
				} else if (mtl.includes("—á—Ç–æ") || mtl.includes("–∫–∞–∫–∏–µ") || mtl.includes("—á–æ") || mtl.includes("—á–µ–º") || mtl.includes("–∫–∞–∫–æ–µ") || mtl.includes("–∫–∞–∫–æ–π") || mtl.includes("—à–æ")) {
					if (mtl.includes("–∫–æ–º–∞–Ω–¥—ã")) {
						message.channel.send(answerForCommands[Math.floor(Math.random() * answerForCommands.length)]);
					} else if (mtl.includes("—Ñ–∏—à–∫–∏") || mtl.includes("–¥–µ–ª–∞—Ç—å") || mtl.includes("–∑–∞–Ω–∏–º–∞—Ç—å—Å—è") || mtl.includes("–∑–∞–Ω—è—Ç—å—Å—è") || mtl.includes("–µ—Å—Ç—å")) {
						message.channel.send(answerForFeatures[Math.floor(Math.random() * answerForFeatures.length)]);
					} else if (mtl.includes("–∏–≤–µ–Ω—Ç—ã") || mtl.includes("–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è") || mtl.includes("–∏–≤–µ–Ω—Ç") || mtl.includes("–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")) {
						message.channel.send(answerForEvents[Math.floor(Math.random() * answerForEvents.length)]);
					} else if (mtl.includes("—Ä–µ–∞–∫—Ü–∏–∏") || mtl.includes("—Ä–µ–∞–∫—Ü–∏—è")) {
						message.channel.send(answerForReact[Math.floor(Math.random() * answerForReact.length)]);
					} else if (mtl.includes("–º–∞–º–µ") || mtl.includes("–ø–∞–ø–µ") || mtl.includes("–º–∞—Ç–µ—Ä–∏") || mtl.includes("–æ—Ç—Ü—É") || mtl.includes("–≤ —Ö—É–π") || mtl.includes("—Å–∫–∞–∂–µ—à—å") || mtl.includes("–¥–µ–¥—É") || mtl.includes("–º–∞—Ç—å") || mtl.includes("–±–∞–±–∫–µ") || mtl.includes("–±–∞–±—É—à–∫–µ") || mtl.includes("–∫–æ—Ç–∏–∫—É") || mtl.includes("—Å–æ–±–∞—á–∫–µ")) {
						message.channel.send(answerForToxic[Math.floor(Math.random() * answerForToxic.length)]);
					} else {
						message.channel.send(didntGetQuest[Math.floor(Math.random() * didntGetQuest.length)]);
					}
				} else if (mtl.includes("–µ–±–ª–∞–Ω") || mtl.includes("–ª–æ—Ö") || mtl.includes("–ø—Ä–∏–¥—É—Ä–æ–∫") || mtl.includes("–∑–∞–µ–±–∞–ª") || mtl.includes("—Å—É–∫–∞") || mtl.includes("–ø–∞–ø–∞") || mtl.includes("–º–∞—Ç—å") || mtl.includes("–æ—Ç–µ—Ü") || mtl.includes("–º–∞–º–∞") || mtl.includes("–º–∞–º–µ") || mtl.includes("–ø–∞–ø–µ") || mtl.includes("–æ—Ç—Ü—É") || mtl.includes("–º–∞—Ç–µ—Ä–∏") || mtl.includes("–º–∞–º–∫–µ") || mtl.includes("–ø–∞–ø–µ") || mtl.includes("–±–∞—Ç–µ") || mtl.includes("–±–∞—Ç—å–µ") || mtl.includes("—Ö—É–π") || mtl.includes("—Ö—É—è") || mtl.includes("—É–µ–±–∞–Ω") || mtl.includes("—É—ë–±–æ–∫") || mtl.includes("—É–µ–±–æ–∫") || mtl.includes("–ø–∏–∑–¥–∞") || mtl.includes("–ø–∏–∑–¥—ã") || mtl.includes("–ø–æ–ø—É—â—å") || mtl.includes("–∑–∞—Ç—Ä–æ–ª–µ–Ω") || mtl.includes("–∑–∞—Ç—Ä–æ–ª–ª–µ–Ω") || mtl.includes("—Å–ª–∏–ª—Å—è") || mtl.includes("—Å–ª–∏—Ç") || mtl.includes("—Å–ª–∏—Ç—ã–π") || mtl.includes("–∏–¥–∏–æ—Ç") || mtl.includes("—Ç—É–ø–æ–π") || mtl.includes("–º—É–¥–∞–∫") || mtl.includes("–¥—É—Ä–∞–∫") || mtl.includes("–¥–∞—É–Ω") || mtl.includes("–≥–µ–π") || mtl.includes("–ø–∏–¥–æ—Ä")) {
					message.channel.send(answerForRude[Math.floor(Math.random() * answerForRude.length)]);
				} else if (mtl.includes("‚ô•") || mtl.includes("‚ù§") || mtl.includes("<3") || mtl.includes("—è —Ç–µ–±—è –ª—é–±–ª—é") || mtl.includes("—Ö–æ—Ä–æ—à–∏–π") || mtl.includes("üòò")) {
					message.channel.send(answerForLove[Math.floor(Math.random() * answerForLove.length)]);
				} else if (mtl.includes("–º–æ–¥–µ—Ä") || mtl.includes("–∞–¥–º–∏–Ω") || mtl.includes("–æ–≤–Ω–µ—Ä") || mtl.includes("–≤–ª–∞–¥–µ–ª") || mtl.includes("—Ä–æ–ª—å") || mtl.includes("—Ä–æ–ª–∏")) {
					message.channel.send(answerForRoles[Math.floor(Math.random() * answerForRoles.length)]);
				} else if (mtl.includes("–æ —Å–µ–±–µ")) {
					message.channel.send(answerForAboutMe[Math.floor(Math.random() * answerForAboutMe.length)]);
				} else {
					message.channel.send(didntGetQuest[Math.floor(Math.random() * didntGetQuest.length)]);
				}
			}
		}
		//–°—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –≤ —á–∞—Ç–µ —Å–µ–ª—Ñ–∏
		//–ò —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
		if (message.channel.id == config.selfiesChannel && !message.author.bot) {
			if (message.attachments.size <= 0) {
				message.delete();
			} else {
				message.react("üíò");
			}
		}
		repWords.forEach(async word => {
			try {
				if (message.content.toLowerCase().includes(word)) {
					profileData = await profileModel.updateOne({
						userID: uid,
					}, {
						$inc: {
							reputation: 5,
						}
					});
				}
			} catch (err) {
				if (err.name === "ReferenceError")
					console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
				console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
			}
		})
		minusRepWorld.forEach(async word => {
			try {
				if (message.content.toLowerCase().includes(word)) {
					profileData = await profileModel.updateOne({
						userID: uid,
					}, {
						$inc: {
							reputation: -10,
						}
					});
				}
			} catch (err) {
				if (err.name === "ReferenceError")
					console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
				console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
			}
		})
		//—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
		helloWords.forEach(async word => {
			try {
				if (message.content.toLowerCase().includes(word)) {
					message.react("üíú");
				}
			} catch (err) {
				if (err.name === "ReferenceError")
					console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
				console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
			}
		})
		//—Ä–∞–∑–Ω–∞—è –¥–∏—á—å
		let messageArray = message.content.split(" ");
		let command = messageArray[0].toLowerCase();
		let args = messageArray.slice(1);
		if (!message.content.startsWith(prefix)) return;
		let cmd = bot.commands.get(command.slice(prefix.length));
		if (cmd) cmd.run(bot, message, args, profileData);

		//–∑–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è
		profileData = await profileModel.findOne({
			userID: uid
		});
		let achieve = profileData.achievements;
		let userMsgs = profileData.msgs;
		let rUser = message.author;
		if (userMsgs >= 10000) {
			const exclsName = `"–ö–ª–∞–≤–∏—à–Ω–∏–∫"`;
			const exclsEmoji = "üéπ";

			let newExclsEmbed = new Discord.MessageEmbed()
				.setColor(`${config.defaultColor}`)
				.setTitle(`‚∏ù‚∏ù ‚ô°‚ÇäÀö ${rUser.username} –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è ${exclsEmoji}!‚óû`)
				.setDescription(`${rUser} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –∑–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è **${exclsName}**!`)
				.setFooter(`${rUser.username}`, `${rUser.displayAvatarURL({dynamic: true})}`)
				.setTimestamp();

			achieveNew = achieve.toString();
			if (achieveNew.indexOf(exclsEmoji) > -1) {
				return;
			} else {
				achieveNew = achieveNew + exclsEmoji + " ";
				profileData = await profileModel.updateOne({
					userID: uid,
				}, {
					$set: {
						achievements: achieveNew
					}
				});
				let exclsGet = new Discord.MessageEmbed()
					.setColor(`${config.defaultColor}`)
					.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –ó–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è –ø–æ–ª—É—á–µ–Ω!‚óû")
					.setDescription(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –∑–Ω–∞–∫ –æ—Ç–ª–∏—á–∏—è **${exclsName}**!\n–í–∞—à–∏ –∑–Ω–∞—á–∫–∏: ${achieveNew}`)
					.setTimestamp();

				bot.users.cache.get(rUser.id).send(exclsGet);
				bot.channels.cache.get(config.mainChannel).send(newExclsEmbed);
			}
		}

	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

bot.on('voiceStateUpdate', async (oldState, newState) => {
	try {
		if (newState.member.user.bot) return;

		let uid = newState.member.user.id;

		//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–æ–∫
		pvcData = await pvcModel.findOne({
			userID: uid
		});
		//—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–æ–∫
		if (!pvcData) {
			let pvc = await pvcModel.create({
				userID: uid,
				ownvc: 0,
			});
			//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
			pvc.save();
		}
		//—á–µ–∫ –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
		profileData = await profileModel.findOne({
			userID: uid
		});
		//—Å–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
		if (!profileData) {
			let profile = await profileModel.create({
				userID: uid,
				silverCoins: 200,
				goldCoins: 0,
				xp: 0,
				lvl: 1,
				msgs: 0,
				msgsForCoinGet: 0,
				reputation: 0,
				clan: "–ù–µ—Ç",
				marriage: "–ù–µ—Ç",
				profileStatus: config.defaultPStatus,
				profileBanner: config.defaultPBanner,
				profileLine: config.defaultPLine,
				achievements: " ",
			});
			//—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
			profile.save();
		}
		//—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤–æ–π—Å–∞–∫—Ç–∏–≤–∞
		profileData = await profileModel.findOne({
			userID: uid
		});
		let userCoins = profileData.silverCoins;
		pvc = await pvcModel.findOne({
			userID: uid
		});
		let ownvc = pvc.ownvc;

		// const seconds = Math.floor((uvc.vctime / 1000) % 60);
		// const minutes = Math.floor((uvc.vctime / 1000 / 60) % 60);
		// const hours = Math.floor((uvc.vctime / 1000 / 60 / 60) % 24);
		// const days = Math.floor(uvc.vctime / 1000 / 60 / 60 / 24);
		//
		//---–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã---
		//
		if (newState.channelID == config.createChannelId) { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–º—ã
			//—Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–π —Ä—É–º—ã, —Å–¥–µ–ª–∞—Ç—å –ª–∏–º–∏—Ç –≤ 1 —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–∏–¥–µ—Ç—å –∫–∞–Ω–∞–ª
			//–∫–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–±–æ–∫
			if (userCoins < prCost) {
				newState.setChannel(null);
				let errorCoins = new Discord.MessageEmbed()
					.setColor(`${config.errColor}`)
					.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –û—à–∏–±–∫–∞‚óû")
					.setDescription(`–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userCoins} ${config.silverCoin}\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã ${prCost} ${config.silverCoin}`)
					.setTimestamp();
				bot.users.cache.get(newState.member.user.id).send(errorCoins);
				return;
			} else {
				profileData = await profileModel.updateOne({
					userID: uid,
				}, {
					$inc: {
						silverCoins: -prCost
					}
				});
				profileData = await profileModel.findOne({userID: uid});
				let userCoins = profileData.silverCoins;
				let vcCreate = new Discord.MessageEmbed()
					.setColor(`${config.defaultColor}`)
					.setTitle("‚∏ù‚∏ù ‚ô°‚ÇäÀö –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã‚óû")
					.setDescription(`C –í–∞—Å –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ ${prCost} ${config.silverCoin} –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã.\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${userCoins - prCost} ${config.silverCoin}`)
					.setTimestamp();
				bot.users.cache.get(newState.member.user.id).send(vcCreate);

				newState.guild.channels.create(oldState.member.user.username, {
					type: 'voice',
					userLimit: 1,
					parent: config.createChannelCategory,
					permissionOverwrites: [{
						id: newState.id,
						allow: ['VIEW_CHANNEL']
					}, {
						id: config.nonverifiedUserRole,
						deny: ['CONNECT']
					}]
				}).then(
					async c => {
						try {
							//–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
							newState.setChannel(c);
							//–ø—Ä–∏—Å–≤–æ–∏—Ç—å –∞–π–¥–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∫ –ø—Ä–æ—Ñ–∞–π–ª—É
							newOwnvcID = `${bot.channels.cache.find(channel => channel.name === newState.member.user.username).id}`;
							pvcResponce = await pvcModel.updateOne({
								userID: uid,
							}, {
								$set: {
									ownvc: newOwnvcID
								}
							});
						} catch (err) {
							console.warn(err);
						}
					}
				)
			}
		}
		//–µ—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∏—Ç —Å –Ω–µ–≥–æ, —Ç–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
		if (oldState.channel != null) {
			if (oldState.channel.members.size <= 0 && config.createChannelCategory == oldState.channel.parentID && oldState.channel.id != config.createChannelId) {
				bot.channels.cache.find(ch => ch.id == oldState.channel.id).delete();
			}
		}
		const category = await bot.channels.cache.get(config.createChannelCategory);
		category.children.forEach(channel => {
			if (channel.members.size <= 0 && channel.id != config.createChannelId) {
				channel.delete()
			}
		});
	} catch (err) {
		if (err.name === "ReferenceError")
			console.log("–£ –≤–∞—Å –æ—à–∏–±–∫–∞")
		console.log(`1.${err.name}\n2.${err.message}\n3.${err.stack}`);
	}
});

bot.login(token);